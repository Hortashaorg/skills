/* eslint-disable */
/* tslint:disable */
// noinspection JSUnusedGlobalSymbols
// biome-ignore-all: Ignore generated file
/*
 * ------------------------------------------------------------
 * ## This file was automatically generated by drizzle-zero. ##
 * ## Any changes you make to this file will be overwritten. ##
 * ##                                                        ##
 * ## Additionally, you should also exclude this file from   ##
 * ## your linter and/or formatter to prevent it from being  ##
 * ## checked or modified.                                   ##
 * ##                                                        ##
 * ## SOURCE: https://github.com/0xcadams/drizzle-zero        ##
 * ------------------------------------------------------------
 */

import type { DrizzleToZeroSchema, ZeroCustomType } from "drizzle-zero";
import type * as drizzleSchema from "./db/schema.ts";

type ZeroSchema = DrizzleToZeroSchema<typeof drizzleSchema>;

/**
 * The Zero schema object.
 * This type is auto-generated from your Drizzle schema definition.
 */
export const schema = {
	tables: {
		account: {
			name: "account",
			columns: {
				id: {
					type: "string",
					optional: false,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"account",
						"id"
					>,
				},
				email: {
					type: "string",
					optional: false,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"account",
						"email"
					>,
				},
				name: {
					type: "string",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"account",
						"name"
					>,
				},
				createdAt: {
					type: "number",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"account",
						"createdAt"
					>,
					serverName: "created_at",
				},
				updatedAt: {
					type: "number",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"account",
						"updatedAt"
					>,
					serverName: "updated_at",
				},
			},
			primaryKey: ["id"],
		},
		tag: {
			name: "tag",
			columns: {
				id: {
					type: "string",
					optional: false,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tag",
						"id"
					>,
				},
				name: {
					type: "string",
					optional: false,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tag",
						"name"
					>,
				},
				description: {
					type: "string",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tag",
						"description"
					>,
				},
				createdAt: {
					type: "number",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tag",
						"createdAt"
					>,
					serverName: "created_at",
				},
				updatedAt: {
					type: "number",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tag",
						"updatedAt"
					>,
					serverName: "updated_at",
				},
			},
			primaryKey: ["id"],
		},
		tagToTech: {
			name: "tagToTech",
			columns: {
				techId: {
					type: "string",
					optional: false,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tagToTech",
						"techId"
					>,
					serverName: "tech_id",
				},
				tagId: {
					type: "string",
					optional: false,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tagToTech",
						"tagId"
					>,
					serverName: "tag_id",
				},
			},
			primaryKey: ["techId", "tagId"],
			serverName: "tag_to_technology",
		},
		tech: {
			name: "tech",
			columns: {
				id: {
					type: "string",
					optional: false,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tech",
						"id"
					>,
				},
				name: {
					type: "string",
					optional: false,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tech",
						"name"
					>,
				},
				description: {
					type: "string",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tech",
						"description"
					>,
				},
				github: {
					type: "string",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tech",
						"github"
					>,
				},
				website: {
					type: "string",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tech",
						"website"
					>,
				},
				createdAt: {
					type: "number",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tech",
						"createdAt"
					>,
					serverName: "created_at",
				},
				updatedAt: {
					type: "number",
					optional: true,
					customType: null as unknown as ZeroCustomType<
						ZeroSchema,
						"tech",
						"updatedAt"
					>,
					serverName: "updated_at",
				},
			},
			primaryKey: ["id"],
			serverName: "technology",
		},
	},
	relationships: {
		tag: {
			tagsToTech: [
				{
					sourceField: ["id"],
					destField: ["tagId"],
					destSchema: "tagToTech",
					cardinality: "many",
				},
			],
		},
		tagToTech: {
			tech: [
				{
					sourceField: ["techId"],
					destField: ["id"],
					destSchema: "tech",
					cardinality: "one",
				},
			],
			tag: [
				{
					sourceField: ["tagId"],
					destField: ["id"],
					destSchema: "tag",
					cardinality: "one",
				},
			],
		},
		tech: {
			tagsToTech: [
				{
					sourceField: ["id"],
					destField: ["techId"],
					destSchema: "tagToTech",
					cardinality: "many",
				},
			],
		},
	},
} as const;

/**
 * Represents the Zero schema type.
 * This type is auto-generated from your Drizzle schema definition.
 */
export type Schema = typeof schema;
